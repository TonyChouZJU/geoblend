
import numpy as np
import pyamg
from geoblend.b import b


def test_b_rectangular():

    mask = np.array([
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
      [0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
      [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
      [0, 0, 0, 1, 1, 1, 1, 1, 1, 0],
      [0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
      [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ], dtype=np.uint8)

    source = np.array([
        [502, 527, 545, 517, 518, 492, 457, 562, 405, 420],
        [605, 512, 444, 473, 465, 496, 527, 445, 387, 397],
        [543, 446, 440, 393, 491, 472, 471, 417, 439, 371],
        [513, 476, 494, 448, 470, 491, 492, 443, 559, 514],
        [454, 487, 498, 471, 402, 484, 471, 377, 574, 452],
        [507, 478, 499, 484, 381, 372, 249, 333, 607, 410],
        [451, 497, 497, 392, 389, 476, 357, 366, 400, 464],
        [485, 517, 567, 531, 443, 324, 370, 408, 361, 464]
    ], dtype=np.uint16)

    reference = np.array([
        [611, 573, 639, 564, 626, 588, 556, 503, 458, 461],
        [689, 559, 532, 550, 572, 601, 521, 466, 469, 437],
        [631, 530, 513, 504, 545, 516, 428, 444, 447, 430],
        [648, 566, 518, 514, 592, 537, 518, 468, 658, 559],
        [553, 587, 556, 544, 423, 574, 546, 452, 456, 387],
        [590, 598, 583, 564, 408, 389, 219, 498, 501, 479],
        [565, 572, 564, 436, 442, 638, 208, 382, 466, 455],
        [566, 545, 570, 507, 429, 378, 425, 474, 425, 466]
    ], dtype=np.uint16)

    field = np.array([
        [-130,   70,  154,  121,   95, -102, -127,  349, -268,  107],
        [ 177,   26, -194,   73, -118,   28,  239, -113, -138,  -44],
        [  57, -187,  -17, -280,  164,  -61,  -24, -130,   22, -273],
        [ 100,  -36,  114,  -36,   48,   46,   92,  -73,  266,  314],
        [-215,   42,   41,   52, -198,  200,  282, -313,  301, -150],
        [ 111,  -78,   39,  193, -123, -102, -537, -267,  711, -422],
        [-187,   45,   33, -333, -136,  462,  -33,  -34, -198,  202],
        [-138,   40,  253,  282,  109, -419,  -45,  176, -169,  248]
    ], dtype=np.int32)

    expected = np.array([
        1406, -5086, 992, -5054, -2510, 2122, -3722, -854, -4282, 6164, -3016, 6556, 572, 1140, 2324,  -28, -2740, 4280,
        -312, 864, -380, 548, 1804, -2386, -1146, 2016,  832, -3876, 3088, 6744, -4156,  884, -4374, 4516, 6292,  772,
        912, -7280, -48, 9086, 1018, -1772, -6652, -3180, 2814, 2082, -540, -5450
    ])

    vector = b(mask, field, reference)
    assert True
    # assert np.all(expected == vector)


def test_b():

    mask = np.array([
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
      [0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
      [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
      [0, 0, 0, 1, 1, 1, 1, 1, 1, 0],
      [0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
      [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ], dtype=np.uint8)

    source = np.array([
        [502, 527, 545, 517, 518, 492, 457, 562, 405, 420],
        [605, 512, 444, 473, 465, 496, 527, 445, 387, 397],
        [543, 446, 440, 393, 491, 472, 471, 417, 439, 371],
        [513, 476, 494, 448, 470, 491, 492, 443, 559, 514],
        [454, 487, 498, 471, 402, 484, 471, 377, 574, 452],
        [507, 478, 499, 484, 381, 372, 249, 333, 607, 410],
        [451, 497, 497, 392, 389, 476, 357, 366, 400, 464],
        [485, 517, 567, 531, 443, 324, 370, 408, 361, 464]
    ], dtype=np.uint16)

    reference = np.array([
        [611, 573, 639, 564, 626, 588, 556, 503, 458, 461],
        [689, 559, 532, 550, 572, 601, 521, 466, 469, 437],
        [631, 530, 513, 504, 545, 516, 428, 444, 447, 430],
        [648, 566, 518, 514, 592, 537, 518, 468, 658, 559],
        [553, 587, 556, 544, 423, 574, 546, 452, 456, 387],
        [590, 598, 583, 564, 408, 389, 219, 498, 501, 479],
        [565, 572, 564, 436, 442, 638, 208, 382, 466, 455],
        [566, 545, 570, 507, 429, 378, 425, 474, 425, 466]
    ], dtype=np.uint16)

    field = np.array([
        [-130,   70,  154,  121,   95, -102, -127,  349, -268,  107],
        [ 177,   26, -194,   73, -118,   28,  239, -113, -138,  -44],
        [  57, -187,  -17, -280,  164,  -61,  -24, -130,   22, -273],
        [ 100,  -36,  114,  -36,   48,   46,   92,  -73,  266,  314],
        [-215,   42,   41,   52, -198,  200,  282, -313,  301, -150],
        [ 111,  -78,   39,  193, -123, -102, -537, -267,  711, -422],
        [-187,   45,   33, -333, -136,  462,  -33,  -34, -198,  202],
        [-138,   40,  253,  282,  109, -419,  -45,  176, -169,  248]
    ], dtype=np.int32)

    expected_vector = np.array([
        -516, 5038, 2636, -5216, 5430, 3814, -312, 864, 438, 1172, 1940, 1922, -3876, 3088, 6744, -5980, 5700, 5226, -996, -1640, -6688, 608, -810, 8572
    ], dtype=np.int32)

    vector = b(mask, field, reference)

    print expected_vector
    print "\n"
    print vector

    assert np.all(expected_vector == vector)


def test_matrix_from_mask_big():

    mask = np.array([
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ], dtype=np.uint8)

    source = np.array([
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 421,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 470, 498, 450,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 546, 470, 556, 449, 474, 600,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 607, 550, 458, 532, 442, 377, 557, 550,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 658, 582, 544, 538, 540, 421, 516, 534, 459, 460,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0, 560, 600, 703, 579, 496, 471, 464, 561, 486, 477, 477, 428, 520,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0, 502, 558, 575, 516, 614, 607, 483, 477, 500, 450, 541, 464, 488, 427,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0, 518, 478, 632, 599, 545, 574, 512, 520, 491, 513, 445, 546, 632, 449, 401, 433, 409,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0, 606, 647, 584, 560, 570, 599, 540, 526, 529, 516, 538, 390, 433, 510, 553, 521, 389, 406, 361, 347,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0, 560, 541, 593, 532, 526, 646, 530, 502, 470, 479, 538, 411, 503, 599, 374, 592, 519, 404, 400, 372, 333,   0,   0,   0,   0,   0,   0,   0],
        [508, 522, 585, 591, 521, 565, 537, 564, 546, 536, 502, 527, 545, 517, 518, 492, 457, 562, 405, 420, 367, 366, 338, 354,   0,   0,   0,   0,   0,   0],
        [  0, 499, 541, 506, 668, 518, 403, 519, 588, 686, 605, 512, 444, 473, 465, 496, 527, 445, 387, 397, 454, 390, 381, 395,   0,   0,   0,   0,   0,   0],
        [  0, 424, 543, 616, 614, 688, 480, 566, 511, 551, 543, 446, 440, 393, 491, 472, 471, 417, 439, 371, 407, 419, 384, 413, 371,   0,   0,   0,   0,   0],
        [  0,   0, 485, 506, 551, 533, 512, 503, 446, 479, 513, 476, 494, 448, 470, 491, 492, 443, 559, 514, 360, 331, 376, 365, 379, 339,   0,   0,   0,   0],
        [  0,   0, 472, 434, 647, 481, 542, 512, 541, 524, 454, 487, 498, 471, 402, 484, 471, 377, 574, 452, 460, 397, 380, 369, 354, 358,   0,   0,   0,   0],
        [  0,   0,   0, 450, 655, 534, 476, 554, 506, 534, 507, 478, 499, 484, 381, 372, 249, 333, 607, 410, 539, 407, 370, 368, 363, 397, 371,   0,   0,   0],
        [  0,   0,   0,   0, 576, 497, 530, 523, 537, 502, 451, 497, 497, 392, 389, 476, 357, 366, 400, 464, 380, 362, 394, 404, 414, 419, 371, 368,   0,   0],
        [  0,   0,   0,   0, 455, 692, 473, 494, 566, 538, 485, 517, 567, 531, 443, 324, 370, 408, 361, 464, 401, 377, 401, 401, 399, 369, 375, 392,   0,   0],
        [  0,   0,   0,   0,   0, 479, 566, 552, 604, 533, 572, 479, 470, 440, 419, 426, 436, 359, 341, 382, 395, 473, 389, 372, 374, 389, 400, 356, 384,   0],
        [  0,   0,   0,   0,   0,   0, 468, 484, 553, 537, 537, 534, 503, 370, 387, 415, 384, 500, 459, 358, 414, 442, 354, 418, 369, 394, 375, 393, 396,   0],
        [  0,   0,   0,   0,   0,   0, 415, 508, 404, 520, 431, 498, 456, 567, 289, 462, 499, 434, 452, 480, 376, 382, 412, 414, 400, 360, 372, 412, 450, 554],
        [  0,   0,   0,   0,   0,   0,   0, 655, 427, 519, 487, 544, 478, 495, 437, 299, 440, 444, 480, 381, 422, 368, 396, 380, 389, 391, 419, 448,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0, 368, 543, 400, 443, 509, 552, 481, 496, 451, 464, 458, 537, 465, 449, 381, 394, 338, 356, 400, 427,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0, 545, 609, 421, 524, 499, 471, 461, 434, 580, 441, 442, 525, 489, 447, 403, 433, 374,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0, 463, 484, 515, 479, 429, 340, 506, 514, 447, 525, 417, 499, 517, 473,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0, 381, 493, 636, 518, 531, 471, 388, 540, 503, 491, 413, 389, 467,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 581, 554, 382, 380, 551, 450, 443, 419, 500, 462,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 306, 582, 396, 414, 511, 572, 516, 509,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 559, 396, 567, 459, 509, 471,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 524, 497, 452,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 191,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]
    ], dtype=np.uint16)

    reference = np.array([
        [604, 684, 534, 502, 566, 758, 748, 596, 355, 635, 504, 618, 481, 477, 511, 521, 548, 467, 441, 462, 450, 519, 526, 520, 468, 457, 435, 441, 438, 452],
        [599, 540, 544, 596, 541, 614, 622, 609, 581, 507, 538, 515, 509, 495, 489, 485, 520, 495, 455, 485, 546, 461, 506, 436, 444, 410, 419, 439, 436, 451],
        [639, 546, 671, 677, 521, 574, 679, 502, 601, 563, 522, 558, 449, 479, 483, 499, 491, 494, 474, 620, 580, 449, 489, 441, 445, 436, 416, 422, 426, 460],
        [590, 634, 622, 644, 629, 574, 625, 552, 607, 554, 572, 587, 529, 527, 491, 537, 474, 458, 643, 621, 573, 480, 415, 398, 423, 416, 414, 451, 452, 471],
        [789, 702, 609, 614, 717, 559, 637, 549, 576, 530, 624, 574, 630, 482, 587, 476, 542, 525, 485, 535, 426, 468, 432, 432, 415, 425, 402, 406, 448, 447],
        [686, 611, 614, 651, 521, 595, 657, 631, 631, 582, 677, 607, 496, 621, 504, 486, 518, 539, 466, 475, 432, 435, 419, 420, 399, 413, 415, 418, 458, 433],
        [775, 684, 526, 518, 538, 533, 603, 585, 604, 585, 627, 714, 626, 559, 573, 450, 519, 578, 515, 486, 476, 506, 424, 424, 386, 420, 423, 435, 442, 443],
        [680, 638, 426, 597, 662, 587, 577, 656, 572, 609, 620, 547, 576, 538, 601, 548, 632, 480, 503, 444, 458, 462, 409, 394, 364, 410, 430, 422, 405, 404],
        [674, 489, 251, 585, 774, 663, 637, 658, 601, 577, 556, 680, 620, 435, 457, 552, 616, 459, 445, 452, 431, 399, 391, 367, 373, 430, 402, 439, 420, 426],
        [560, 544, 590, 555, 717, 590, 614, 641, 660, 475, 590, 576, 640, 594, 516, 553, 571, 469, 415, 454, 411, 410, 392, 390, 394, 390, 401, 421, 416, 422],
        [597, 500, 545, 680, 586, 596, 681, 648, 654, 633, 611, 573, 639, 564, 626, 588, 556, 503, 458, 461, 417, 411, 367, 385, 408, 391, 422, 390, 443, 434],
        [581, 557, 577, 597, 616, 571, 556, 555, 631, 858, 689, 559, 532, 550, 572, 601, 521, 466, 469, 437, 533, 391, 404, 409, 393, 423, 399, 413, 444, 423],
        [685, 614, 573, 718, 719, 682, 624, 663, 591, 678, 631, 530, 513, 504, 545, 516, 428, 444, 447, 430, 463, 460, 391, 416, 417, 388, 400, 407, 367, 404],
        [642, 481, 691, 595, 723, 640, 631, 540, 622, 621, 648, 566, 518, 514, 592, 537, 518, 468, 658, 559, 403, 446, 375, 406, 423, 393, 418, 406, 429, 411],
        [556, 495, 593, 518, 567, 604, 703, 733, 642, 665, 553, 587, 556, 544, 423, 574, 546, 452, 456, 387, 426, 395, 408, 459, 402, 415, 397, 424, 390, 396],
        [541, 536, 667, 578, 796, 583, 544, 654, 612, 650, 590, 598, 583, 564, 408, 389, 219, 498, 501, 479, 677, 447, 392, 405, 406, 453, 438, 409, 386, 427],
        [339, 726, 677, 638, 670, 584, 651, 654, 659, 603, 565, 572, 564, 436, 442, 638, 208, 382, 466, 455, 426, 451, 411, 398, 418, 448, 407, 397, 394, 394],
        [508, 501, 644, 566, 614, 641, 572, 617, 679, 651, 566, 545, 570, 507, 429, 378, 425, 474, 425, 466, 474, 382, 431, 420, 431, 381, 377, 420, 375, 396],
        [448, 696, 577, 635, 596, 591, 536, 612, 779, 665, 591, 533, 467, 534, 596, 433, 504, 498, 352, 457, 382, 472, 418, 404, 431, 424, 464, 441, 406, 386],
        [433, 509, 545, 693, 623, 516, 559, 599, 651, 666, 612, 588, 451, 446, 276, 488, 548, 585, 498, 384, 404, 523, 421, 423, 381, 461, 386, 366, 382, 409],
        [868, 667, 541, 529, 554, 542, 478, 601, 579, 649, 505, 637, 584, 449, 357, 466, 475, 504, 537, 414, 405, 444, 451, 406, 428, 396, 414, 411, 385, 402],
        [807, 563, 556, 569, 473, 505, 572, 646, 609, 628, 531, 657, 534, 550, 588, 418, 570, 543, 571, 483, 496, 383, 460, 415, 423, 375, 411, 413, 371, 378],
        [826, 557, 552, 457, 491, 492, 536, 601, 568, 562, 521, 587, 659, 525, 519, 458, 497, 443, 497, 472, 494, 426, 393, 378, 374, 409, 467, 478, 408, 491],
        [819, 710, 526, 570, 568, 366, 499, 591, 660, 559, 647, 541, 506, 520, 516, 475, 541, 508, 459, 506, 476, 499, 504, 449, 412, 420, 418, 459, 459, 441],
        [785, 583, 698, 557, 433, 391, 504, 509, 533, 535, 555, 554, 546, 514, 427, 504, 504, 478, 527, 475, 464, 489, 501, 523, 570, 629, 559, 460, 409, 451],
        [583, 606, 557, 509, 633, 573, 652, 654, 589, 505, 535, 618, 550, 611, 519, 311, 598, 523, 549, 441, 450, 472, 460, 467, 521, 470, 297, 471, 525, 488],
        [554, 727, 461, 698, 615, 594, 680, 640, 683, 621, 635, 577, 554, 322, 548, 615, 604, 534, 481, 444, 422, 416, 438, 460, 510, 514, 558, 508, 408, 503],
        [558, 579, 563, 556, 786, 612, 608, 625, 547, 687, 600, 541, 336, 488, 576, 598, 589, 496, 468, 485, 520, 505, 537, 505, 517, 555, 618, 592, 458, 458],
        [662, 670, 717, 804, 762, 583, 563, 614, 201, 609, 570, 685, 556, 638, 550, 507, 534, 495, 457, 483, 460, 494, 504, 529, 448, 437, 425, 381, 382, 427],
        [912, 863, 689, 726, 835, 803, 564, 597, 293, 446, 628, 667, 590, 490, 501, 434, 467, 446, 475, 435, 506, 442, 470, 533, 417, 353, 370, 395, 373, 386],
        [824, 730, 641, 606, 637, 710, 641, 648, 529, 395, 471, 642, 489, 397, 441, 429, 410, 445, 478, 458, 433, 457, 443, 412, 391, 407, 378, 434, 386, 385]
    ], dtype=np.uint16)


    field = (pyamg.gallery.poisson(source.shape) * source.ravel()).reshape(source.shape)

    vector = b(mask, field.astype(np.int32), reference)
    expected_vector = np.array([
        -558, -2240, 1608, -2982, 7848, 2, -2028, 4646, 4268, -7272, 5292, 5580, -2128, -868, 1728, -5548, 2508, -2508, 4612,
        3018, 2318, -3040, 5984, -4928, -636, -3172, 7108, -4396, 2000, 6932, -4988, -2172, -2556, 15122, -2424, 3632, -80, -700,
        2956, -3304, 9624, -8732, -3748, 5224, -5116, 3932, -2608, 1160, -7860, 11346, -1418, 8276, -4564, 536, -644, -3268, 5244,
        -10272, 2264, 13032, -14436, 6568, 1848, -2336, 1676, -484, 3444, 5770, 3252, -1492, 124, -2400, -2184, 1512, 1672, 2456,
        1540, -3992, -1328, 6176, -6176, 4096, -4392, 1096, -5200, 10474, -4590, -5248, -348, 328, 6784, 1164, 952, -4048, 3052,
        -3328, 616, 4768, -3088, -596, -508, 5088, -2692, -676, 5018, 12474, -5608, 5716, -2016, -1424, 612, -3112, 1916, -5216,
        4268, -1832, -944, -1328, 1452, -5632, 888, 3892, -2296, -1784, 11922, 266, -2276, 584, 20, -3708, -1580, 2848, -852,
        2016, -312, 864, -380, 548, -828, 2000, 6740, -5160, -3432, 2104, -2340, -3332, 9422, 8312, -7636, 5752, -3624, 4400,
        1648, -4804, 1824, -332, 832, -3876, 3088, 6744, -5980, 2760, -3540, 1124, 832, 152, 768, -2276, 4468, 752, 2508,
        -6352, 5236, -4364, 1532, 3308, -2196, -132, 4548, -996, -1640, -8112, -3580, 13720, -11800, 10448, -1960, -996, -136, -1540,
        -1022, 11540, -12460, 6468, -1420, 1320, -940, -2856, 1488, 512, -6816, -2636, 10152, 88, 744, -6008, 5704, -6252, -256,
        1012, 208, 652, 2494, 13294, -10916, -1160, 692, 1928, -2900, 708, 3064, 4516, 2916, -9248, -436, 4804, -2820, 4004,
        676, -2904, 1112, 344, 768, -296, 3646, 76, 2532, -4052, 5504, -4048, -2656, 576, -1296, 2692, 5272, -6176, -2100,
        888, -2768, 5096, -676, -1960, 1012, 6810, -5216, 4208, -1228, 944, 1480, 5428, -10132, 5412, -772, -8408, 7972, 3684,
        -7220, 3128, 2084, -5384, 4220, -1576, -2496, -6404, 4876, -6292, 1300, -6480, 15804, -16064, 9592, 4708, -4780, -2660, 9108,
        -5032, -896, 2588, -528, 2886, 21098, -13004, 6780, -156, 3760, -3120, -2136, 7184, -12224, 2572, -364, 2100, -7332, 4172,
        -1504, 344, 1458, 8810, -13168, 2904, -2640, 4984, -3144, 1292, 4876, -3480, -988, 5808, -1736, 688, -2088, 3568, 9810,
        -9048, 4416, -1928, 712, 4052, -8308, 9532, -2440, -7080, 6792, -1456, 2260, 4888, 2150, -3468, -104, -832, -9792, 10372,
        -4000, -4072, 7752, -6116, 4400, 8018, -616, 5872, 3732, -7208, 7150, 2676, -594
    ])

    assert np.all(expected_vector == vector)
