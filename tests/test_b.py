
import numpy as np
import pyamg
from geoblend.b import b


def test_b_rectangular():
    
    mask = np.array([
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 1, 1, 1, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0]
    ], dtype=np.uint8)

    reference = np.array([
        [555, 555, 514, 514, 514, 514, 479, 479, 479],
        [555, 555, 514, 514, 514, 514, 479, 479, 479],
        [555, 555, 514, 514, 514, 514, 479, 479, 479],
        [504, 504, 472, 472, 472, 472, 458, 458, 458],
        [504, 504, 472, 472, 472, 472, 458, 458, 458],
        [504, 504, 472, 472, 472, 472, 458, 458, 458]
    ], dtype=np.uint16)

    field = np.array([
        [869,  517,  665,  618,  790,  599,  537,  616, 1287],
        [347,   -8,  -63,   -6,  -83,  -64,  -43,  186,  676],
        [425, -107,  -18,   96, -157,  -80, -118,   -6,  425],
        [443,  346,   57,   69,  -22,  -69,  -13,  -67,  596],
        [406,  -24,   47,   40,  -56,   54,   90,   25,  589],
        [1193, 1006,  714,  513,  712,  520,  579,  460,  942]
    ], dtype=np.int32)
    
    expected = np.array([
        2496, 588, 1080, 818, 928, 606, 3502, -386, -110, 992, -1078, 176, -660, 908, 3924, -432, 210, 250, -430, 224, 368, 1038, 1174, 1144, 352, 1446, 1504, 1986
    ], dtype=np.int32)

    vector = b(mask, field, reference)

    assert np.all(expected == vector)


def test_b():

    mask = np.array([
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 1, 0, 0, 0, 0],
        [0, 1, 1, 1, 1, 1, 1, 0, 0],
        [0, 0, 1, 1, 1, 1, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0]
    ], dtype=np.uint8)

    reference = np.array([
        [555, 555, 514, 514, 514, 514, 479, 479, 479],
        [555, 555, 514, 514, 514, 514, 479, 479, 479],
        [555, 555, 514, 514, 514, 514, 479, 479, 479],
        [504, 504, 472, 472, 472, 472, 458, 458, 458],
        [504, 504, 472, 472, 472, 472, 458, 458, 458],
        [504, 504, 472, 472, 472, 472, 458, 458, 458]
    ], dtype=np.uint16)

    field = np.array([
        [869,  517,  665,  618,  790,  599,  537,  616, 1287],
        [347,   -8,  -63,   -6,  -83,  -64,  -43,  186,  676],
        [425, -107,  -18,   96, -157,  -80, -118,   -6,  425],
        [443,  346,   57,   69,  -22,  -69,  -13,  -67,  596],
        [406,  -24,   47,   40,  -56,   54,   90,   25,  589],
        [1193, 1006,  714,  513,  712,  520,  579,  460,  942]
    ], dtype=np.int32)

    expected = np.array([
        1682, 1080, 1718, 2408, -110, 992, -1078, 1076, 2048, 2306, 210, 250, 460, 2182, 352, 2542
    ], dtype=np.int32)

    vector = b(mask, field, reference)

    assert np.all(expected == vector)


def test_matrix_from_mask_big():
    
    mask = np.array([
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ], dtype=np.uint8)
    
    source = np.array([
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 421,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 470, 498, 450,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 546, 470, 556, 449, 474, 600,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 607, 550, 458, 532, 442, 377, 557, 550,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 658, 582, 544, 538, 540, 421, 516, 534, 459, 460,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0, 560, 600, 703, 579, 496, 471, 464, 561, 486, 477, 477, 428, 520,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0, 502, 558, 575, 516, 614, 607, 483, 477, 500, 450, 541, 464, 488, 427,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0, 518, 478, 632, 599, 545, 574, 512, 520, 491, 513, 445, 546, 632, 449, 401, 433, 409,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0, 606, 647, 584, 560, 570, 599, 540, 526, 529, 516, 538, 390, 433, 510, 553, 521, 389, 406, 361, 347,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0, 560, 541, 593, 532, 526, 646, 530, 502, 470, 479, 538, 411, 503, 599, 374, 592, 519, 404, 400, 372, 333,   0,   0,   0,   0,   0,   0,   0],
        [508, 522, 585, 591, 521, 565, 537, 564, 546, 536, 502, 527, 545, 517, 518, 492, 457, 562, 405, 420, 367, 366, 338, 354,   0,   0,   0,   0,   0,   0],
        [  0, 499, 541, 506, 668, 518, 403, 519, 588, 686, 605, 512, 444, 473, 465, 496, 527, 445, 387, 397, 454, 390, 381, 395,   0,   0,   0,   0,   0,   0],
        [  0, 424, 543, 616, 614, 688, 480, 566, 511, 551, 543, 446, 440, 393, 491, 472, 471, 417, 439, 371, 407, 419, 384, 413, 371,   0,   0,   0,   0,   0],
        [  0,   0, 485, 506, 551, 533, 512, 503, 446, 479, 513, 476, 494, 448, 470, 491, 492, 443, 559, 514, 360, 331, 376, 365, 379, 339,   0,   0,   0,   0],
        [  0,   0, 472, 434, 647, 481, 542, 512, 541, 524, 454, 487, 498, 471, 402, 484, 471, 377, 574, 452, 460, 397, 380, 369, 354, 358,   0,   0,   0,   0],
        [  0,   0,   0, 450, 655, 534, 476, 554, 506, 534, 507, 478, 499, 484, 381, 372, 249, 333, 607, 410, 539, 407, 370, 368, 363, 397, 371,   0,   0,   0],
        [  0,   0,   0,   0, 576, 497, 530, 523, 537, 502, 451, 497, 497, 392, 389, 476, 357, 366, 400, 464, 380, 362, 394, 404, 414, 419, 371, 368,   0,   0],
        [  0,   0,   0,   0, 455, 692, 473, 494, 566, 538, 485, 517, 567, 531, 443, 324, 370, 408, 361, 464, 401, 377, 401, 401, 399, 369, 375, 392,   0,   0],
        [  0,   0,   0,   0,   0, 479, 566, 552, 604, 533, 572, 479, 470, 440, 419, 426, 436, 359, 341, 382, 395, 473, 389, 372, 374, 389, 400, 356, 384,   0],
        [  0,   0,   0,   0,   0,   0, 468, 484, 553, 537, 537, 534, 503, 370, 387, 415, 384, 500, 459, 358, 414, 442, 354, 418, 369, 394, 375, 393, 396,   0],
        [  0,   0,   0,   0,   0,   0, 415, 508, 404, 520, 431, 498, 456, 567, 289, 462, 499, 434, 452, 480, 376, 382, 412, 414, 400, 360, 372, 412, 450, 554],
        [  0,   0,   0,   0,   0,   0,   0, 655, 427, 519, 487, 544, 478, 495, 437, 299, 440, 444, 480, 381, 422, 368, 396, 380, 389, 391, 419, 448,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0, 368, 543, 400, 443, 509, 552, 481, 496, 451, 464, 458, 537, 465, 449, 381, 394, 338, 356, 400, 427,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0, 545, 609, 421, 524, 499, 471, 461, 434, 580, 441, 442, 525, 489, 447, 403, 433, 374,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0, 463, 484, 515, 479, 429, 340, 506, 514, 447, 525, 417, 499, 517, 473,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0, 381, 493, 636, 518, 531, 471, 388, 540, 503, 491, 413, 389, 467,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 581, 554, 382, 380, 551, 450, 443, 419, 500, 462,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 306, 582, 396, 414, 511, 572, 516, 509,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 559, 396, 567, 459, 509, 471,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 524, 497, 452,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 191,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]
    ], dtype=np.uint16)
    
    reference = np.array([
        [604, 684, 534, 502, 566, 758, 748, 596, 355, 635, 504, 618, 481, 477, 511, 521, 548, 467, 441, 462, 450, 519, 526, 520, 468, 457, 435, 441, 438, 452],
        [599, 540, 544, 596, 541, 614, 622, 609, 581, 507, 538, 515, 509, 495, 489, 485, 520, 495, 455, 485, 546, 461, 506, 436, 444, 410, 419, 439, 436, 451],
        [639, 546, 671, 677, 521, 574, 679, 502, 601, 563, 522, 558, 449, 479, 483, 499, 491, 494, 474, 620, 580, 449, 489, 441, 445, 436, 416, 422, 426, 460],
        [590, 634, 622, 644, 629, 574, 625, 552, 607, 554, 572, 587, 529, 527, 491, 537, 474, 458, 643, 621, 573, 480, 415, 398, 423, 416, 414, 451, 452, 471],
        [789, 702, 609, 614, 717, 559, 637, 549, 576, 530, 624, 574, 630, 482, 587, 476, 542, 525, 485, 535, 426, 468, 432, 432, 415, 425, 402, 406, 448, 447],
        [686, 611, 614, 651, 521, 595, 657, 631, 631, 582, 677, 607, 496, 621, 504, 486, 518, 539, 466, 475, 432, 435, 419, 420, 399, 413, 415, 418, 458, 433],
        [775, 684, 526, 518, 538, 533, 603, 585, 604, 585, 627, 714, 626, 559, 573, 450, 519, 578, 515, 486, 476, 506, 424, 424, 386, 420, 423, 435, 442, 443],
        [680, 638, 426, 597, 662, 587, 577, 656, 572, 609, 620, 547, 576, 538, 601, 548, 632, 480, 503, 444, 458, 462, 409, 394, 364, 410, 430, 422, 405, 404],
        [674, 489, 251, 585, 774, 663, 637, 658, 601, 577, 556, 680, 620, 435, 457, 552, 616, 459, 445, 452, 431, 399, 391, 367, 373, 430, 402, 439, 420, 426],
        [560, 544, 590, 555, 717, 590, 614, 641, 660, 475, 590, 576, 640, 594, 516, 553, 571, 469, 415, 454, 411, 410, 392, 390, 394, 390, 401, 421, 416, 422],
        [597, 500, 545, 680, 586, 596, 681, 648, 654, 633, 611, 573, 639, 564, 626, 588, 556, 503, 458, 461, 417, 411, 367, 385, 408, 391, 422, 390, 443, 434],
        [581, 557, 577, 597, 616, 571, 556, 555, 631, 858, 689, 559, 532, 550, 572, 601, 521, 466, 469, 437, 533, 391, 404, 409, 393, 423, 399, 413, 444, 423],
        [685, 614, 573, 718, 719, 682, 624, 663, 591, 678, 631, 530, 513, 504, 545, 516, 428, 444, 447, 430, 463, 460, 391, 416, 417, 388, 400, 407, 367, 404],
        [642, 481, 691, 595, 723, 640, 631, 540, 622, 621, 648, 566, 518, 514, 592, 537, 518, 468, 658, 559, 403, 446, 375, 406, 423, 393, 418, 406, 429, 411],
        [556, 495, 593, 518, 567, 604, 703, 733, 642, 665, 553, 587, 556, 544, 423, 574, 546, 452, 456, 387, 426, 395, 408, 459, 402, 415, 397, 424, 390, 396],
        [541, 536, 667, 578, 796, 583, 544, 654, 612, 650, 590, 598, 583, 564, 408, 389, 219, 498, 501, 479, 677, 447, 392, 405, 406, 453, 438, 409, 386, 427],
        [339, 726, 677, 638, 670, 584, 651, 654, 659, 603, 565, 572, 564, 436, 442, 638, 208, 382, 466, 455, 426, 451, 411, 398, 418, 448, 407, 397, 394, 394],
        [508, 501, 644, 566, 614, 641, 572, 617, 679, 651, 566, 545, 570, 507, 429, 378, 425, 474, 425, 466, 474, 382, 431, 420, 431, 381, 377, 420, 375, 396],
        [448, 696, 577, 635, 596, 591, 536, 612, 779, 665, 591, 533, 467, 534, 596, 433, 504, 498, 352, 457, 382, 472, 418, 404, 431, 424, 464, 441, 406, 386],
        [433, 509, 545, 693, 623, 516, 559, 599, 651, 666, 612, 588, 451, 446, 276, 488, 548, 585, 498, 384, 404, 523, 421, 423, 381, 461, 386, 366, 382, 409],
        [868, 667, 541, 529, 554, 542, 478, 601, 579, 649, 505, 637, 584, 449, 357, 466, 475, 504, 537, 414, 405, 444, 451, 406, 428, 396, 414, 411, 385, 402],
        [807, 563, 556, 569, 473, 505, 572, 646, 609, 628, 531, 657, 534, 550, 588, 418, 570, 543, 571, 483, 496, 383, 460, 415, 423, 375, 411, 413, 371, 378],
        [826, 557, 552, 457, 491, 492, 536, 601, 568, 562, 521, 587, 659, 525, 519, 458, 497, 443, 497, 472, 494, 426, 393, 378, 374, 409, 467, 478, 408, 491],
        [819, 710, 526, 570, 568, 366, 499, 591, 660, 559, 647, 541, 506, 520, 516, 475, 541, 508, 459, 506, 476, 499, 504, 449, 412, 420, 418, 459, 459, 441],
        [785, 583, 698, 557, 433, 391, 504, 509, 533, 535, 555, 554, 546, 514, 427, 504, 504, 478, 527, 475, 464, 489, 501, 523, 570, 629, 559, 460, 409, 451],
        [583, 606, 557, 509, 633, 573, 652, 654, 589, 505, 535, 618, 550, 611, 519, 311, 598, 523, 549, 441, 450, 472, 460, 467, 521, 470, 297, 471, 525, 488],
        [554, 727, 461, 698, 615, 594, 680, 640, 683, 621, 635, 577, 554, 322, 548, 615, 604, 534, 481, 444, 422, 416, 438, 460, 510, 514, 558, 508, 408, 503],
        [558, 579, 563, 556, 786, 612, 608, 625, 547, 687, 600, 541, 336, 488, 576, 598, 589, 496, 468, 485, 520, 505, 537, 505, 517, 555, 618, 592, 458, 458],
        [662, 670, 717, 804, 762, 583, 563, 614, 201, 609, 570, 685, 556, 638, 550, 507, 534, 495, 457, 483, 460, 494, 504, 529, 448, 437, 425, 381, 382, 427],
        [912, 863, 689, 726, 835, 803, 564, 597, 293, 446, 628, 667, 590, 490, 501, 434, 467, 446, 475, 435, 506, 442, 470, 533, 417, 353, 370, 395, 373, 386],
        [824, 730, 641, 606, 637, 710, 641, 648, 529, 395, 471, 642, 489, 397, 441, 429, 410, 445, 478, 458, 433, 457, 443, 412, 391, 407, 378, 434, 386, 385]
    ], dtype=np.uint16)
    
    
    field = (pyamg.gallery.poisson(source.shape) * source.ravel()).reshape(source.shape)
    
    vector = b(mask, field.astype(np.int32), reference)
    
    expected = np.array([
        -3480, -2786, -3458, -3446, 1592, -2488, -3922, -418, -472, -9340, 7582, 4774, 1420, 1582, 2808, -702, 3410, 2554, -2120, -398, -3946, 3108, 5500, -2464, -318, -1586, 3554, -2198, 1000, 3466, -2494, 858, 2474, 3024, -7668, 6736, -40, -350, 1478, -1652, 4812, -4366,
        -1874, 2612, -2558, 1966, -1304, 580, -518, 3610, -7250, 9226, -2282, 268, -322, -1634, 2622, -5136, 1132, 6516, -7218, 3284, 924, -1168, 838, 1326, -2224, -976, 6466, -746, 62, -1200, -1092, 756, 836, 1228, 770, -1996, -664, 3088, -3088, 2048, -2196, 548,
        508, 3376, -4300, -340, -174, 164, 3392, 582, 476, -2024, 1526, -1664, 308, 2384, -1544, -298, -254, 2544, -1346, 1298, -1618, 232, -76, 2858, -1008, -712, 306, -1556, 958, -2608, 2134, -916, -472, -664, 726, -2816, 444, 1946, -1148, 2412, 1646, -5282,
        4482, 292, 10, -1854, -790, 1424, -426, 1008, -156, 432, -190, 274, -414, 1000, 3370, -2580, -1716, 1052, -1170, 1574, 2650, 2940, -1550, 2876, -1812, 2200, 824, -2402, 912, -166, 416, -1938, 1544, 3372, -2990, 1380, -1770, 562, 416, 76, 384, 522,
        -182, -4118, 4438, -3176, 2618, -2182, 766, 1654, -1098, -66, 2274, -498, -820, -4056, -1790, 6860, -5900, 5224, -980, -498, -68, 1042, -2170, 3086, -986, 3234, -710, 660, -470, -1428, 744, 256, -3408, -1318, 5076, 44, 372, -3004, 2852, -3126, -128, 506,
        104, 2118, -1206, 3098, -750, -580, 346, 964, -1450, 354, 1532, 2258, 1458, -4624, -218, 2402, -1410, 2002, 338, -1452, 556, 172, 3632, -2352, -1904, 2182, 1266, -2026, 2752, -2024, -1328, 288, -648, 1346, 2636, -3088, -1050, 444, -1384, 2548, -338, 744,
        -3594, 386, 2032, 2104, -614, 472, 740, 2714, -5066, 2706, -386, -4204, 3986, 1842, -3610, 1564, 1042, -2692, 3634, -2252, -5842, -798, 2438, -3146, 650, -3240, 7902, -8032, 4796, 2354, -2390, -1330, 4554, -2516, -448, 1294, 3108, -1302, 8212, -1646, 3390, -78,
        1880, -1560, -1068, 3592, -6112, 1286, -182, 1050, -3666, 2086, -752, 3404, -3666, 1016, -2076, 1452, -1320, 2492, -1572, 646, 2438, -1740, -494, 2904, -868, 344, 2524, -2280, 1514, -68, 2208, -964, 356, 2026, -4154, 4766, -1220, -3540, 5296, 3124, -3822, 1834,
        -4086, 2958, 2148, 2028, -2820, 6430, 392, 56, 7972, -7812, 198, 758, -2814, -1052, -698, -3444, -698, -1026, -3304
    ])
    
    print vector
    print "\n"
    print expected
    
    assert np.all(expected == vector)
